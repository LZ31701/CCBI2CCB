#ifndef _CCBII_CCBIReader_H_
#define _CCBII_CCBIReader_H_

#include <string>
#include <vector>
#include <set>
#include <fstream>

#define kCCBIVersion 5

enum {
	kCCBIPropTypePosition = 0,
	kCCBIPropTypeSize,
	kCCBIPropTypePoint,
	kCCBIPropTypePointLock,
	kCCBIPropTypeScaleLock,
	kCCBIPropTypeDegrees,
	kCCBIPropTypeInteger,
	kCCBIPropTypeFloat,
	kCCBIPropTypeFloatVar,
	kCCBIPropTypeCheck,
	kCCBIPropTypeSpriteFrame,
	kCCBIPropTypeTexture,
	kCCBIPropTypeByte,
	kCCBIPropTypeColor3,
	kCCBIPropTypeColor4FVar,
	kCCBIPropTypeFlip,
	kCCBIPropTypeBlendmode,
	kCCBIPropTypeFntFile,
	kCCBIPropTypeText,
	kCCBIPropTypeFontTTF,
	kCCBIPropTypeIntegerLabeled,
	kCCBIPropTypeBlock,
	kCCBIPropTypeAnimation,
	kCCBIPropTypeCCBIFile,
	kCCBIPropTypeString,
	kCCBIPropTypeBlockCCControl,
	kCCBIPropTypeFloatScale,
	kCCBIPropTypeFloatXY,
	kCCBIPropTypeMAX
};

enum {
	kCCBIFloat0 = 0,
	kCCBIFloat1,
	kCCBIFloatMinus1,
	kCCBIFloat05,
	kCCBIFloatInteger,
	kCCBIFloatFull
};

enum {
	kCCBIPlatformAll = 0,
	kCCBIPlatformIOS,
	kCCBIPlatformMac
};

enum {
	kCCBITargetTypeNone = 0,
	kCCBITargetTypeDocumentRoot = 1,
	kCCBITargetTypeOwner = 2,
};

enum
{
	kCCBIKeyframeEasingInstant,

	kCCBIKeyframeEasingLinear,

	kCCBIKeyframeEasingCubicIn,
	kCCBIKeyframeEasingCubicOut,
	kCCBIKeyframeEasingCubicInOut,

	kCCBIKeyframeEasingElasticIn,
	kCCBIKeyframeEasingElasticOut,
	kCCBIKeyframeEasingElasticInOut,

	kCCBIKeyframeEasingBounceIn,
	kCCBIKeyframeEasingBounceOut,
	kCCBIKeyframeEasingBounceInOut,

	kCCBIKeyframeEasingBackIn,
	kCCBIKeyframeEasingBackOut,
	kCCBIKeyframeEasingBackInOut,
};

enum
{
	kCCBIPositionTypeRelativeBottomLeft,
	kCCBIPositionTypeRelativeTopLeft,
	kCCBIPositionTypeRelativeTopRight,
	kCCBIPositionTypeRelativeBottomRight,
	kCCBIPositionTypePercent,
	kCCBIPositionTypeMultiplyResolution,
};

enum
{
	kCCBISizeTypeAbsolute,
	kCCBISizeTypePercent,
	kCCBISizeTypeRelativeContainer,
	kCCBISizeTypeHorizontalPercent,
	kCCBISizeTypeVerticalPercent,
	kCCBISizeTypeMultiplyResolution,
};

enum
{
	kCCBIScaleTypeAbsolute,
	kCCBIScaleTypeMultiplyResolution
};

/**
* @brief  CCBI structure after parsing
*/
class CCBITree
{
private:
	/*hearder*/


	/*sequence*/
	/*nodegraph*/
};

/**
* @brief Parse CCBII file which is generated by CocosBuilder
*/
class CCBIReader
{
private:
	unsigned char *mBytes;
	int mCurrentByte;
	int mCurrentBit;

	std::vector<std::string> mStringCache;

	std::ofstream outccb;

public:

	bool jsControlled;
	CCBIReader(const char *pCCBIFile, const char *pOutCCBFile);
	virtual ~CCBIReader();

	void setCCBIRootPath(const char* pCCBIRootPath);
	const std::string& getCCBIRootPath() const;

	// Used in CCNodeLoader::parseProperties()
	std::set<std::string>* getAnimatedProperties();
	std::set<std::string>& getLoadedSpriteSheet();

	/* Utility methods. */
	static std::string lastPathComponent(const char* pString);
	static std::string deletePathExtension(const char* pString);
	static std::string toLowerCase(const char* pCCString);
	static bool endsWith(const char* pString, const char* pEnding);

	/* Parse methods. */
	int readInt(bool pSigned);
	unsigned char readByte();
	bool readBool();
	std::string readUTF8();
	float readFloat();
	std::string readCachedString();
	bool isJSControlled();


	bool readCallbackKeyframes();
	bool readSoundKeyframes();

	bool readSequences();

	bool readHeader();
	bool readStringCache();
	//void readStringCacheEntry();
	void readNodeGraph();

	bool getBit();
	void alignBits();
	
	void readKeyframe(int type, const char *animatedpropname);

	void parseProperties();

	/*ccb xml generate function list*/
	void writeXMLDeclaration();
	void writeXMLRootStartPart();
	void writeXMLRootEndPart();

	void writeXMLSequenceHead();

	void writeXMLArrayStartTag();
	void writeXMLArrayEndTag();

	void writeXMLDictStartTag();
	void writeXMLDictEndTag();

	void writeXMLNotes();
	void writeXMLResolutions();

	/*nodegraph*/
	void writeXMLNodegraphHead();

private:
	void writeXMLHeadDefault();
	void writeXMLSequenceDefault();
	void writeXMLNodegraphDefault();
	void writeXMLNodegraphPropDefault();

};


class CCBIMainPropTypeName
{
private:
	static const char *typeName[kCCBIPropTypeMAX + 1];
	static const int  animatedproptypevalue[kCCBIPropTypeMAX + 1];
	CCBIMainPropTypeName();
public:
	static const char* getPropTypeName(int typevalue);
	static const int getAnimatedPropTypeValue(int typevalue);
};

#endif
